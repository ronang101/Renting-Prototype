/**
 * This script manages the display and interaction logic for user matches within the Redwood Prototype platform. It orchestrates the fetching, display, and interaction with user matches, integrating several key functionalities and external modules.
 *
 * Key Functionalities:
 * - Fetches user matches from the backend and dynamically displays them using match cards generated by `createMatchCard`.
 * - Integrates with `calendarHandler.js` to initialize calendars for each match, allowing users to view potential move-in dates.
 * - Utilizes `TabHandler` for managing tabbed content within match cards, specifically toggling between budget and calendar views.
 * - Sets up chat functionality through `ChatManager`, enabling users to initiate conversations with their matches directly from the match card.
 * - Handles user actions such as reporting matches, removing matches, and updating the display based on these interactions.
 *
 * How It Works:
 * 1. Upon DOMContentLoaded, `displayMatches` fetches matches using `fetchMatches` from `../utils/api.js`.
 * 2. Each match is displayed using a match card, created by `createMatchCard` from `matchGenerator.js`.
 * 3. For each match, a Pikaday calendar is initialized to show available move-in dates, and tabbed content is managed using `TabHandler`.
 * 4. Event listeners are added for reporting, removing matches, and initiating chat, leveraging the `ChatManager` for chat functionality.
 *
 * External Dependencies:
 * - `../utils/api.js`: For API calls to fetch matches, remove matches, and fetch images.
 * - `./matchGenerator.js`: For generating the HTML content of each match card.
 * - `../utils/calendarHandler.js`: For initializing Pikaday calendars for each match.
 * - `../utils/tabHandler.js`: For managing tabbed content within match cards.
 * - `../utils/chatSetup.js`: For setting up chat functionality with matches.
 *
 * Usage:
 * - This script is used for where matches are displayed to the user, enhancing the interactivity and functionality of the match viewing experience.
 * - It provides a dynamic and interactive way for users to explore their matches, facilitating engagement through built-in chat, detailed match profiles, and personalized match management actions.
 */

import { fetchMatches, getImage, removeMatch } from '../utils/api.js'
import { createMatchCard } from './matchGenerator.js'
import { initializePikadayForMatch } from '../utils/calendarHandler.js'
import TabHandler from '../utils/tabHandler.js'
import { ChatManager } from '../utils/chatSetup.js'

export function displayMatches () {
  fetchMatches()
    .then(matches => {
      if (matches.length === 0) {
        // No matchesavailable, hide the recommendation container and show the message.
        document.getElementById('recommendation-container').style.display = 'none'
        document.getElementById('no-recommendation-container').style.display = 'block'
      }
      const container = document.getElementById('recommendation-container')
      // Create a match card for each of the users given matches.
      container.innerHTML = matches.map((match, index) => createMatchCard(match, index)).join('')
      const firebaseConfig = {
        // Configuration details for the Firebase project.
        apiKey: 'AIzaSyB4hEEmN3UNymYMGNMZ0WevuvHC1_ksaIY',
        authDomain: 'redwood-f9f87.firebaseapp.com',
        projectId: 'redwood-f9f87',
        storageBucket: 'redwood-f9f87.appspot.com',
        messagingSenderId: '799894576615',
        appId: '1:799894576615:web:3655e06194c8eaaf53b142',
        measurementId: 'G-SR762FJBG3'
      }

      const chatInstance = new ChatManager(firebaseConfig)
      matches.forEach((match, index) => {
        // Create calendar for given match.
        initializePikadayForMatch(match, index)
        // Prepare calendar and budget switches.
        // Select tabs and contents for the current match card in this case we are dealing with the budget and calendar.
        const tabs = [document.querySelector(`#budget-switch-${index}`), document.querySelector(`#calendar-switch-${index}`)]
        const contents = [document.querySelector(`#budget-container-${index}`), document.querySelector(`#calendar-container-${index}`)]

        // Instantiate TabHandler for the current match card.
        // eslint-disable-next-line no-new
        new TabHandler(tabs, contents, false)

        // Prepare report, contact and remove buttons.
        document.getElementById(`report-btn-${index}`).addEventListener('click', () => reportInitialize(match))
        document.getElementById(`remove-match-btn-${index}`).addEventListener('click', () => removeInitialize(match))
        document.getElementById(`contact-match-btn-${index}`).addEventListener('click', () => {
          document.getElementById(`contact-modal-${index}`).style.display = 'flex'
          chatInstance.receiveMessages(index, match.uid)
        })
        document.getElementById(`close-btn-${index}`).addEventListener('click', () => {
          document.getElementById(`contact-modal-${index}`).style.display = 'none'
        })
        document.getElementById(`send-btn-${index}`).addEventListener('click', () => {
          chatInstance.sendMessage(index, match.uid)
        })
        document.getElementById(`message-input-${index}`).addEventListener('keypress', (event) => chatInstance.handleEnterKeyPress(event, index, match.uid))
        fetchAndSetImage(match.id, '/static/images/vecteezy_default-profile-account-unknown-icon-black-silhouette_20765399.jpg')
      })
    })
    .catch(error => console.error('Error fetching matches:', error))
}

// Function to fetch the image URL and update the img src.
function fetchAndSetImage (matchId, placeholderImageUrl) {
  getImage(matchId).then(presignedUrl => {
    // When the pre-signed URL is fetched, update the img src.
    document.querySelector(`#profile-img-${matchId}`).src = presignedUrl
  })
    .catch(error => {
      // Log error and ensure placeholder is used if fetch fails.
      console.error('Error fetching image:', error)
      document.querySelector(`#profile-img-${matchId}`).src = placeholderImageUrl
    })
}

// Prepares and displays the report modal for a specific match.
function reportInitialize (match) {
  const reportForm = document.getElementById('report-form')
  reportForm.reportedUserId.value = match.id // Set the user ID in the hidden form field.
  const reportModal = document.getElementById('report-modal')
  reportModal.style.display = 'flex' // Show the report modal.
};

// Hides the match card and triggers the API call to remove the match from the user's list.
function removeInitialize (match) {
  const matchContainer = document.getElementById(`match-card-${match.id}`)
  matchContainer.style.display = 'none'
  removeMatch(match.id)
  checkIfMatchesLeft()
};

export function checkIfMatchesLeft () {
  const matches = document.querySelectorAll('.recommendation:not([style*="display: none"])')
  if (matches.length === 0) {
    // No matches available, hide the recommendation container and show the message.
    document.getElementById('recommendation-container').style.display = 'none'
    document.getElementById('no-recommendation-container').style.display = 'block'
  }
}
